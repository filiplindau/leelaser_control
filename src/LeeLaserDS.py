#	"$Name:  $";
#	"$Header:  $";
#=============================================================================
#
# file :        LeeLaserDS.py
#
# description : Python source for the LeeLaserDS and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                LeeLaserDS are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#  		This file is generated by POGO
#	(Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import LeeLaser_control as LLCtl
import threading
import time
import Queue
import numpy as np



#==================================================================
#   LeeLaserDS Class Description:
#
#         Control of a LeeLaser LDP-200 Nd:YLF laser.
#
#==================================================================
# 	Device States Description:
#
#   DevState.ON :       The laser is on.
#   DevState.OFF :      The laser is shut down.
#   DevState.FAULT :    The laser is in a fault state.
#   DevState.STANDBY :  The laser is in standby state, no laser emission.
#   DevState.UNKNOWN :  Device server is disconnected from the laser.
#   DevState.INIT :     Initializing the connection
#==================================================================


class LeeLaserDS(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------
	class LaserData(object):
		def __init__(self):
			self.current = (0.0, 'A')
			self.percentCurrent = (0.0, '%')
			self.SHGTemperature = (0.0, 'degC')
			self.pumpTemperature = (0.0, 'degC')
			self.headTemperature = (0.0, 'degC')
			self.laserState = (0, '')
			self.shutterState = (0, '')
			self.faultState = (0, '')
			self.connectionState = (0, '')
			self.faultList = ([], [])
			
	class LaserCommand:
		def __init__(self, command, data=None):
			self.command = command
			self.data = data	
#------------------------------------------------------------------
#	Device constructor
#------------------------------------------------------------------
	def __init__(self, cl, name):
		PyTango.Device_4Impl.__init__(self, cl, name)
		LeeLaserDS.init_device(self)

#------------------------------------------------------------------
#	Device destructor
#------------------------------------------------------------------
	def delete_device(self):
		self.info_stream(''.join(("[Device delete_device method] for device", self.get_name())))
		self.stopHardwareThread()


#------------------------------------------------------------------
#	Device initialization
#------------------------------------------------------------------
	def init_device(self):
		print "In ", self.get_name(), "::init_device()"
		self.set_state(PyTango.DevState.UNKNOWN)
		self.get_device_properties(self.get_device_class())
		try:
			self.info_stream(''.join(('IP address: ', str(self.IPaddress))))
		except AttributeError:
			self.error_stream('IP address not defined, using 128.100.101.191.')
			self.IPaddress = '128.100.101.191'
		try:
			self.info_stream(''.join(('Modbus port: ', str(self.ModbusPort))))
		except AttributeError:
			self.error_stream('Modbus port not defined, using 502.')
			self.ModbusPort = 502
		try:
			self.info_stream(''.join(('Slave ID: ', str(self.SlaveID))))
		except AttributeError:
			self.error_stream('Slave ID not defined, using 1.')
			self.SlaveID = 1
		try:
			self.info_stream(''.join(('Alignment percent current: ', str(self.AlignmentPercentCurrent))))
		except AttributeError:
			self.error_stream('Alignment percent current, using 40%.')
			self.AlignmentPercentCurrent = 40.0
		try:
			self.info_stream(''.join(('Running percent current: ', str(self.RunningPercentCurrent))))
		except AttributeError:
			self.error_stream('Running percent current, using 70%.')
			self.RunningPercentCurrent = 70.0

		self.laserData = self.LaserData()
		self.leeLaser = None
		self.laserPollingPeriod = 0.5
		self.rampSleepTime = 2.0
		self.rampStepCurrent = 5.0
		
		self.commandQueue = Queue.Queue(100)
		self.commandSleepTime = 0.0
		
		self.stateHandlerDict = {PyTango.DevState.INIT: self.initHandler,
								PyTango.DevState.ON: self.onHandler,
								PyTango.DevState.STANDBY: self.onHandler,
								PyTango.DevState.OFF: self.onHandler,
								PyTango.DevState.FAULT: self.onHandler,
								PyTango.DevState.UNKNOWN: self.unknownHandler}		

		self.startHardwareThread()

#------------------------------------------------------------------
#	Always excuted hook method
#------------------------------------------------------------------
	def always_executed_hook(self):
		pass

	def startHardwareThread(self):
		self.stopHardwareThread()
		self.hardwareThread = threading.Thread()
		threading.Thread.__init__(self.hardwareThread, target=self.stateHandlerDispatcher)
		self.hardwareThread.start()
		self.info_stream('readHardware thread started.')


	def stopHardwareThread(self):
		print 'Stopping thread...'
		self.set_state(PyTango.DevState.UNKNOWN)
		self.stopHardwareThreadFlag = True
		try:
			if self.hardwareThread.isAlive() == True:
				print 'It was alive.'
				self.hardwareThread.join(3)
			print 'Now stopped.'
		except AttributeError:
			pass
			# The name was not defined
		self.stopHardwareThreadFlag = False
		try:
			if self.leeLaser != None:
				self.leeLaser.closeClient()
		except Exception, e:
			self.error_stream(''.join(('In stopHardwareThread: Could not close client, error ', str(e))))


	def stateHandlerDispatcher(self):
		prevState = self.get_state()
		while self.stopHardwareThreadFlag == False:
			try:
				state = self.get_state()
				self.stateHandlerDict[state](prevState)
				prevState = state
			except KeyError:
				self.stateHandlerDict[PyTango.DevState.UNKNOWN](prevState)
				prevState = state

	def issueCommand(self, cmd, data=None):
		# Clear the queue first to avoid delay in command execution
		with self.commandQueue.mutex:
			self.commandQueue.queue.clear()
		self.commandSleepTime = 0.0
		self.commandQueue.put(self.LaserCommand(cmd, data))

	def checkCommands(self):
			try:
				t0 = time.time()
				# Check if there is sleep time left
				# If not, get new command
				if t0 > self.commandSleepTime:
					cmd = self.commandQueue.get(block=False)
					
					if cmd.command == 'writePercentCurrent':					
						self.setPercentCurrent(cmd.data)
						self.commandQueue.task_done()
					elif cmd.command == 'openShutter':					
						self.leeLaser.openShutter()
						self.commandQueue.task_done()
					elif cmd.command == 'closeShutter':					
						self.leeLaser.closeShutter()
						self.commandQueue.task_done()
					elif cmd.command == 'clearFault':
						self.leeLaser.clearFault()
						self.commandQueue.task_done()
					elif cmd.command == 'startLaser':
						targetCurrent = self.laserData.percentCurrent[0]
						if self.laserData.percentCurrent[0] > 40:							
							self.setPercentCurrent(40.0)							
						self.leeLaser.startLaser()
						self.generateCurrentRamp(targetCurrent)
						self.commandQueue.task_done()
					elif cmd.command == 'shutdownLaser':
						self.leeLaser.shutdownLaser()
						self.commandQueue.task_done()
					elif cmd.command == 'sleep':
						# Update the sleep time
						self.commandSleepTime = t0 + cmd.data
						self.commandQueue.task_done()
					elif cmd.command == 'setAlignmentCurrent':	
						self.generateCurrentRamp(self.AlignmentPercentCurrent)
						self.commandQueue.task_done()					
					elif cmd.command == 'setRunningCurrent':
						self.generateCurrentRamp(self.RunningPercentCurrent)
						self.commandQueue.task_done()						

			except Queue.Empty:
				pass
			except LLCtl.LeeLaserError, e:
				self.error_stream(''.join(('In checkCommands: error ', str(e))))
				self.set_state(PyTango.DevState.UNKNOWN)


	def initHandler(self, prevState):
		handledStates = [PyTango.DevState.INIT]
		self.info_stream('Entering initHandler.')
		self.set_status('Initializing leeLaser')

		while self.stopHardwareThreadFlag == False:
			t0 = time.time()
			# Check if we should break this loop and go to a new state handler:
			if self.get_state() not in handledStates:
				break

			self.commandQueue.queue.clear()
			self.commandQueue.put(self.LaserCommand('writePercentCurrent', 0.0))
			self.commandQueue.put(self.LaserCommand('shutdownLaser'))
			self.commandQueue.put(self.LaserCommand('closeShutter'))
			self.checkCommands()
			
			# Check if we should break this loop and go to a new state handler:
			if self.get_state() not in handledStates:
				break

								
			self.set_state(PyTango.DevState.OFF)


	def onHandler(self, prevState):
		handledStates = [PyTango.DevState.ON, PyTango.DevState.STANDBY, PyTango.DevState.OFF, PyTango.DevState.FAULT]
		self.info_stream('Entering onHandler.')

		lastReadTime = 0.0
		while self.stopHardwareThreadFlag == False:
			t0 = time.time()
			# Check if we should break this loop and go to a new state handler:
			if self.get_state() not in handledStates:
				break

			# Check if any new commands arrived:
			self.checkCommands()
			
			# Check if we should break this loop and go to a new state handler:
			if self.get_state() not in handledStates:
				break
			
			# Read hardware
			if t0 - lastReadTime > self.laserPollingPeriod:
				try:
					self.leeLaser.readHardware()
				except Exception, e:
					self.set_state(PyTango.DevState.UNKNOWN)
					self.error_stream(''.join(('In onHandler: Error reading hardware, ', str(e))))
				self.updateLaserData()
				self.checkState()
				lastReadTime = t0
						
			time.sleep(0.1)


	def offHandler(self, prevState):
		pass


	def faultHandler(self, prevState):
		handledStates = [PyTango.DevState.FAULT]
		responseAttempts = 0
		maxAttempts = 10
		responseTimeout = 0.5
		self.info_stream('Entering faultHandler.')
		self.set_status('Fault detected')
		
		while self.stopHardwareThreadFlag == False:
			# Check if we should break this loop and go to a new state handler:
			if self.get_state() not in handledStates:
				break			
			try:
				self.leeLaser.closeClient()
			except Exception, e:
				responseAttempts += 1
				time.sleep(responseTimeout)
				continue
			try:
				self.leeLaser = LLCtl.LeeLaserControl(ip=self.IPaddress, port=self.ModbusPort)
			except Exception, e:
				responseAttempts += 1
				time.sleep(responseTimeout)
				continue
			if responseAttempts > maxAttempts:
				self.set_state(PyTango.DevState.UNKNOWN)
				continue
			self.set_state(prevState)


	def unknownHandler(self, prevState):
		handledStates = [PyTango.DevState.UNKNOWN]
		retryPeriod = 2.0
		self.info_stream('Entering unknownHandler.')
		self.set_status('Connection problems. Attempting reconnection.')
		
		while self.stopHardwareThreadFlag == False:
			# Check if we should break this loop and go to a new state handler:
			if self.get_state() not in handledStates:
				break	
			try:
				if self.leeLaser != None:
					self.leeLaser.closeClient()
			except Exception, e:
				self.error_stream(''.join(('In unknownHandler: leeLaser.closeClient failed, ', str(e))))
			# Just keep trying to connect until it works:...		
			try:
				self.leeLaser = LLCtl.LeeLaserControl(ip=self.IPaddress, port=self.ModbusPort, slaveId=self.SlaveID)
				if self.leeLaser.connected == False:
					self.error_stream('In unknownHandler: Could not connect to socket. ')
					continue
			except Exception, e:
				self.error_stream(''.join(('In unknownHandler: Could not connect to socket. ', str(e))))
				self.set_status('Could not connect to socket.')
				PyTango.Except.throw_exception('LeeLaser connection fail',
										 str(e), 'unknownHandler', sever=PyTango.ErrSeverity.ERR)
				time.sleep(retryPeriod)
				try:
					self.leeLaser.closeClient()
				except Exception:
					pass
				continue
			self.set_state(PyTango.DevState.INIT)

	def updateLaserData(self):
		try:
			self.laserData.current = self.leeLaser.getCurrent()
			self.laserData.percentCurrent = self.leeLaser.getPercentCurrent()
			self.laserData.SHGTemperature = self.leeLaser.getSHGTemperature()
			self.laserData.pumpTemperature = self.leeLaser.getPumpTemperature()
			self.laserData.headTemperature = self.leeLaser.getHeadTemperature()
			self.laserData.laserState = self.leeLaser.getLaserState()
			self.laserData.shutterState = self.leeLaser.getShutterState()
			self.laserData.faultState = self.leeLaser.getFaultStatus()
			self.laserData.connectionState = self.leeLaser.getConnectionState()
			self.laserData.faultList = self.leeLaser.getLaserFaults()
		except Exception, e:
			self.error_stream(''.join(('In updateLaserData: Error getting data, ', str(e))))
			self.set_state(PyTango.DevState.UNKNOWN)

	def setPercentCurrent(self, cp):
		try:
			self.leeLaser.setPercentCurrent(cp)
		except Exception, e:
			self.error_stream(''.join(('In setPercentCurrent: Error setting current, ', str(e))))
			self.set_state(PyTango.DevState.UNKNOWN)
			
	def generateCurrentRamp(self, cp):
		if cp < 60:
			# If the intended current is low, just set it
			self.commandQueue.put(self.LaserCommand('writePercentCurrent', cp))
		else:
			# Or if it is below the current current, just set it
			if self.laserData.percentCurrent[0] > cp:
				self.setPercentCurrent(cp)
			else:
				# Otherwise ramp the current up with some sleep time in between
				if self.laserData.percentCurrent[0] < 40:
					startCurrent = 40
				else:
					startCurrent = self.laserData.percentCurrent[0]
				for cp_ramp in np.arange(startCurrent, cp, self.rampStepCurrent):
					self.commandQueue.put(self.LaserCommand('writePercentCurrent', cp_ramp))
					self.commandQueue.put(self.LaserCommand('sleep' , self.rampSleepTime))
				self.commandQueue.put(self.LaserCommand('writePercentCurrent', cp))
			

#------------------------------------------------------------------
#	Check the state of the laser and set the tango state accordingly
#------------------------------------------------------------------
	def checkState(self):
		laserState = self.laserData.laserState
		shutterState = self.laserData.shutterState
		faultState = self.laserData.faultState
		connectionState = self.laserData.connectionState
		if connectionState[1].lower() == 'disconnected':
			if self.get_state() != PyTango.DevState.UNKNOWN:
				self.set_state(PyTango.DevState.UNKNOWN)
				self.set_status('Laser connection disconnected.')
		elif faultState[1].lower() == 'no faults' and shutterState[1].lower() == 'shutter open' and laserState[1].lower() == 'on':
			if self.get_state() != PyTango.DevState.ON:
				self.set_state(PyTango.DevState.ON)
				self.set_status('Laser ON, shutter OPEN')
		elif faultState[1].lower() == 'no faults' and laserState[1].lower() == 'on':
			if self.get_state() != PyTango.DevState.STANDBY:
				self.set_state(PyTango.DevState.STANDBY)
				self.set_status('Laser ON, shutter CLOSED')
		elif faultState[1].lower() == 'no faults':
			if self.get_state() != PyTango.DevState.OFF:
				self.set_state(PyTango.DevState.OFF)
				self.set_status('Laser OFF')
		elif faultState[1].lower() != 'no faults':
			self.set_status(faultState[1])
			if self.get_state() != PyTango.DevState.FAULT:
				self.set_state(PyTango.DevState.FAULT)
				self.set_status('Fault detected: ')
				for f in self.laserData.faultList[1]:
					self.append_status(f, True)
				
		else:
			if self.get_state() != PyTango.DevState.UNKNOWN:
				self.set_state(PyTango.DevState.UNKNOWN)





#------------------------------------------------------------------
#	Read Attribute Hardware
#------------------------------------------------------------------
	def read_attr_hardware(self, data):
		pass

#==================================================================
#
#	LeeLaserDS read/write attribute methods
#
#==================================================================



#------------------------------------------------------------------
#	Read Current attribute
#------------------------------------------------------------------
	def read_Current(self, attr):
		#	Add your own code here
		
		attr_Current_read = self.laserData.current[0]
		attr.set_value(attr_Current_read)


#---- Current attribute State Machine -----------------
	def is_Current_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read PercentCurrent attribute
#------------------------------------------------------------------
	def read_PercentCurrent(self, attr):
		#	Add your own code here
		
		attr_PercentCurrent_read = self.laserData.percentCurrent[0]
		attr.set_value(attr_PercentCurrent_read)

#------------------------------------------------------------------
#	Write ExposureTime attribute
#------------------------------------------------------------------
	def write_PercentCurrent(self, attr):
		print "In ", self.get_name(), "::write_PercentCurrent()"
		data = attr.get_write_value()
		print "Attribute value = ", data

		#	Add your own code here
		self.issueCommand('writePercentCurrent', data)


#---- PercentCurrent attribute State Machine -----------------
	def is_PercentCurrent_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read SHGTemperature attribute
#------------------------------------------------------------------
	def read_SHGTemperature(self, attr):
		#	Add your own code here
		
		attr_SHGTemperature_read = self.laserData.SHGTemperature[0]
		attr.set_value(attr_SHGTemperature_read)


#---- SHGTemperature attribute State Machine -----------------
	def is_SHGTemperature_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read PumpTemperature attribute
#------------------------------------------------------------------
	def read_PumpTemperature(self, attr):
		#	Add your own code here
		
		attr_PumpTemperature_read = self.laserData.pumpTemperature[0]
		attr.set_value(attr_PumpTemperature_read)


#---- PumpTemperature attribute State Machine -----------------
	def is_PumpTemperature_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read HeadTemperature attribute
#------------------------------------------------------------------
	def read_HeadTemperature(self, attr):
		#	Add your own code here
		
		attr_HeadTemperature_read = self.laserData.headTemperature[0]
		attr.set_value(attr_HeadTemperature_read)


#---- HeadTemperature attribute State Machine -----------------
	def is_HeadTemperature_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read LaserState attribute
#------------------------------------------------------------------
	def read_LaserState(self, attr):
		#	Add your own code here
		
		attr_LaserState_read = self.laserData.laserState[1]
		attr.set_value(attr_LaserState_read)


#---- LaserState attribute State Machine -----------------
	def is_LaserState_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read ShutterState attribute
#------------------------------------------------------------------
	def read_ShutterState(self, attr):
		#	Add your own code here
		
		attr_ShutterState_read = self.laserData.shutterState[1]
		attr.set_value(attr_ShutterState_read)


#---- ShutterState attribute State Machine -----------------
	def is_ShutterState_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read FaultStatus attribute
#------------------------------------------------------------------
	def read_FaultStatus(self, attr):
		#	Add your own code here
		
		attr_FaultStatus_read = self.laserData.faultState[1]
		attr.set_value(attr_FaultStatus_read)


#---- FaultStatus attribute State Machine -----------------
	def is_FaultStatus_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read FaultList attribute
#------------------------------------------------------------------
	def read_FaultList(self, attr):
		#	Add your own code here
		
		attr_FaultList_read = self.laserData.faultList[1]
		attr.set_value(attr_FaultList_read, attr_FaultList_read.__len__())



#==================================================================
#
#	LeeLaserDS command methods
#
#==================================================================

#------------------------------------------------------------------
#	On command:
#
#	Description: Start the laser. If the shutter is open, the laser is in the ON state.
#                Otherwise it is in the STANDBY state.
#                
#------------------------------------------------------------------
	def On(self):
		print "In ", self.get_name(), "::On()"
		#	Add your own code here
		self.issueCommand('startLaser')
		self.issueCommand('openShutter')


#---- On command State Machine -----------------
	def is_On_allowed(self):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Off command:
#
#	Description: Shutdown the laser
#                
#------------------------------------------------------------------
	def Off(self):
		print "In ", self.get_name(), "::Off()"
		#	Add your own code here
		self.issueCommand('closeShutter')
		self.issueCommand('shutdownLaser')


#---- Off command State Machine -----------------
	def is_Off_allowed(self):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Open command:
#
#	Description: Open the shutter. Moves the laser to the ON state.
#                
#------------------------------------------------------------------
	def Open(self):
		print "In ", self.get_name(), "::Open()"
		#	Add your own code here
		self.issueCommand('openShutter')


#---- Open command State Machine -----------------
	def is_Open_allowed(self):
		if self.get_state() in [PyTango.DevState.OFF,
		                        PyTango.DevState.FAULT,
		                        PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Close command:
#
#	Description: Close the shutter. Moves the laser to the STANDBY state.
#                
#------------------------------------------------------------------
	def Close(self):
		print "In ", self.get_name(), "::Close()"
		#	Add your own code here
		self.issueCommand('closeShutter')


#---- Close command State Machine -----------------
	def is_Close_allowed(self):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	ClearFault command:
#
#	Description: Clears the FAULT condition, moving the laser to the STANDBY state if successful.
#                
#------------------------------------------------------------------
	def ClearFault(self):
		print "In ", self.get_name(), "::ClearFault()"
		#	Add your own code here
		self.issueCommand('clearFault')


#---- ClearFault command State Machine -----------------
	def is_ClearFault_allowed(self):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Disconnect command:
#
#	Description: Disconnect from the laser.
#                
#------------------------------------------------------------------
	def Disconnect(self):
		print "In ", self.get_name(), "::Disconnect()"
		#	Add your own code here
		self.stopHardwareThread()


#---- Disconnect command State Machine -----------------
	def is_Disconnect_allowed(self):
		if self.get_state() in [PyTango.DevState.ON,
		                        PyTango.DevState.STANDBY]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	StartLaser command:
#
#	Description: Start the laser up. There is a time delay before the beam is available.
#                
#------------------------------------------------------------------
	def StartLaser(self):
		print "In ", self.get_name(), "::StartLaser()"
		#	Add your own code here
		self.issueCommand('startLaser')


#---- StartLaser command State Machine -----------------
	def is_StartLaser_allowed(self):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True

#------------------------------------------------------------------
#	SetAlignmentCurrent command:
#
#	Description: Sets the laser to the current defined in property AlignmentPercentCurrent
#                
#------------------------------------------------------------------
	def SetAlignmentCurrent(self):
		print "In ", self.get_name(), "::SetAlignmentCurrent()"
		#	Add your own code here
		self.issueCommand('setAlignmentCurrent')


#---- StartLaser command State Machine -----------------
	def is_SetAlignmentCurrent_allowed(self):
		if self.get_state() in [PyTango.DevState.FAULT,
		                        PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True

#------------------------------------------------------------------
#	SetRunningCurrent command:
#
#	Description: Sets the laser to the current defined in property RunningPercentCurrent
#                
#------------------------------------------------------------------
	def SetRunningCurrent(self):
		print "In ", self.get_name(), "::SetRunningCurrent()"
		#	Add your own code here
		self.issueCommand('setRunningCurrent')


#---- StartLaser command State Machine -----------------
	def is_SetRunningCurrent_allowed(self):
		if self.get_state() in [PyTango.DevState.FAULT,
		                        PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#==================================================================
#
#	LeeLaserDSClass class definition
#
#==================================================================
class LeeLaserDSClass(PyTango.DeviceClass):

	#	Class Properties
	class_property_list = {
		}


	#	Device Properties
	device_property_list = {
		'IPaddress':
			[PyTango.DevString,
			"IPaddress of the device",
			[ "128.100.101.190" ] ],
		'ModbusPort':
			[PyTango.DevLong,
			"",
			[ 502 ] ],
		'SlaveID':
			[PyTango.DevLong,
			"SlaveID of the modbus connection",
			[ 0 ] ],
		'AlignmentPercentCurrent':
			[PyTango.DevDouble,
			"Current level to use when aligning the laser. Should be a low value.",
			[ 40.0 ] ],
		'RunningPercentCurrent':
			[PyTango.DevDouble,
			"Current used when the laser is pumping the amplifier ",
			[ 77.0 ] ],
		}


	#	Command definitions
	cmd_list = {
		'On':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		'Off':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		'Open':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		'Close':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		'ClearFault':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		'Disconnect':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		'StartLaser':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		'SetAlignmentCurrent':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		'SetRunningCurrent':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		}


	#	Attribute definitions
	attr_list = {
		'Current':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ],
			{
				'label':"I",
				'unit':"A",
				'max value':100,
				'min value':0,
				'description':"Current thorugh the pump diodes.",
			} ],
		'PercentCurrent':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'label':"I%",
				'unit':"%",
				'max value':100.0,
				'min value':0.0,
				'description':"Current through the diodes as percentage of maximum.",
			} ],
		'SHGTemperature':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ],
			{
				'label':"Tshg",
				'unit':"degC",
				'max value':1000,
				'min value':0,
				'description':"Monitors the SHG temperature.",
			} ],
		'PumpTemperature':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ],
			{
				'label':"Tpump",
				'unit':"degC",
				'max value':1000,
				'min value':0,
				'description':"Monitors the water temperature at the pump.",
			} ],
		'HeadTemperature':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ],
			{
				'label':"Thead",
				'unit':"degC",
				'max value':1000,
				'min value':0,
				'description':"Monitors the temperature return from the laser cavity.",
			} ],
		'LaserState':
			[[PyTango.DevString,
			PyTango.SCALAR,
			PyTango.READ]],
		'ShutterState':
			[[PyTango.DevString,
			PyTango.SCALAR,
			PyTango.READ]],
		'FaultStatus':
			[[PyTango.DevString,
			PyTango.SCALAR,
			PyTango.READ]],
		'FaultList':
			[[PyTango.DevString,
			PyTango.SPECTRUM,
			PyTango.READ, 38]],
		}


#------------------------------------------------------------------
#	LeeLaserDSClass Constructor
#------------------------------------------------------------------
	def __init__(self, name):
		PyTango.DeviceClass.__init__(self, name)
		self.set_type(name);
		print "In LeeLaserDSClass  constructor"

#==================================================================
#
#	LeeLaserDS class main method
#
#==================================================================
if __name__ == '__main__':
	try:
		py = PyTango.Util(sys.argv)
		py.add_TgClass(LeeLaserDSClass, LeeLaserDS, 'LeeLaserDS')

		U = PyTango.Util.instance()
		U.server_init()
		U.server_run()

	except PyTango.DevFailed, e:
		print '-------> Received a DevFailed exception:', e
	except Exception, e:
		print '-------> An unforeseen exception occured....', e
